// [START declaration]

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: skills.proto

package skills

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PublicationType int32

const (
	PublicationType_OTHER            PublicationType = 0
	PublicationType_PERIODIC_ARTICLE PublicationType = 1
	PublicationType_BLOG_ARTICLE     PublicationType = 4
	PublicationType_BOOK             PublicationType = 2
	PublicationType_THESIS           PublicationType = 3
)

// Enum value maps for PublicationType.
var (
	PublicationType_name = map[int32]string{
		0: "OTHER",
		1: "PERIODIC_ARTICLE",
		4: "BLOG_ARTICLE",
		2: "BOOK",
		3: "THESIS",
	}
	PublicationType_value = map[string]int32{
		"OTHER":            0,
		"PERIODIC_ARTICLE": 1,
		"BLOG_ARTICLE":     4,
		"BOOK":             2,
		"THESIS":           3,
	}
)

func (x PublicationType) Enum() *PublicationType {
	p := new(PublicationType)
	*p = x
	return p
}

func (x PublicationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicationType) Descriptor() protoreflect.EnumDescriptor {
	return file_skills_proto_enumTypes[0].Descriptor()
}

func (PublicationType) Type() protoreflect.EnumType {
	return &file_skills_proto_enumTypes[0]
}

func (x PublicationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicationType.Descriptor instead.
func (PublicationType) EnumDescriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{0}
}

type SkillLevel int32

const (
	SkillLevel_NONE       SkillLevel = 0
	SkillLevel_BASIC      SkillLevel = 1
	SkillLevel_AVERAGE    SkillLevel = 2
	SkillLevel_PROFICIENT SkillLevel = 3
	SkillLevel_EXPERT     SkillLevel = 4
	SkillLevel_AUTHORITY  SkillLevel = 5
)

// Enum value maps for SkillLevel.
var (
	SkillLevel_name = map[int32]string{
		0: "NONE",
		1: "BASIC",
		2: "AVERAGE",
		3: "PROFICIENT",
		4: "EXPERT",
		5: "AUTHORITY",
	}
	SkillLevel_value = map[string]int32{
		"NONE":       0,
		"BASIC":      1,
		"AVERAGE":    2,
		"PROFICIENT": 3,
		"EXPERT":     4,
		"AUTHORITY":  5,
	}
)

func (x SkillLevel) Enum() *SkillLevel {
	p := new(SkillLevel)
	*p = x
	return p
}

func (x SkillLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkillLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_skills_proto_enumTypes[1].Descriptor()
}

func (SkillLevel) Type() protoreflect.EnumType {
	return &file_skills_proto_enumTypes[1]
}

func (x SkillLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkillLevel.Descriptor instead.
func (SkillLevel) EnumDescriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{1}
}

type PhoneType int32

const (
	PhoneType_MOBILE PhoneType = 0
	PhoneType_HOME   PhoneType = 1
	PhoneType_WORK   PhoneType = 2
	PhoneType_ANY    PhoneType = 3
)

// Enum value maps for PhoneType.
var (
	PhoneType_name = map[int32]string{
		0: "MOBILE",
		1: "HOME",
		2: "WORK",
		3: "ANY",
	}
	PhoneType_value = map[string]int32{
		"MOBILE": 0,
		"HOME":   1,
		"WORK":   2,
		"ANY":    3,
	}
)

func (x PhoneType) Enum() *PhoneType {
	p := new(PhoneType)
	*p = x
	return p
}

func (x PhoneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneType) Descriptor() protoreflect.EnumDescriptor {
	return file_skills_proto_enumTypes[2].Descriptor()
}

func (PhoneType) Type() protoreflect.EnumType {
	return &file_skills_proto_enumTypes[2]
}

func (x PhoneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhoneType.Descriptor instead.
func (PhoneType) EnumDescriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{2}
}

type Publication_ParticipationType int32

const (
	Publication_MAIN_AUTHOR Publication_ParticipationType = 0
	Publication_CO_AUTHOR   Publication_ParticipationType = 1
	Publication_ASSISTANT   Publication_ParticipationType = 2
	Publication_GUEST       Publication_ParticipationType = 3
	Publication_REVIEWER    Publication_ParticipationType = 4
)

// Enum value maps for Publication_ParticipationType.
var (
	Publication_ParticipationType_name = map[int32]string{
		0: "MAIN_AUTHOR",
		1: "CO_AUTHOR",
		2: "ASSISTANT",
		3: "GUEST",
		4: "REVIEWER",
	}
	Publication_ParticipationType_value = map[string]int32{
		"MAIN_AUTHOR": 0,
		"CO_AUTHOR":   1,
		"ASSISTANT":   2,
		"GUEST":       3,
		"REVIEWER":    4,
	}
)

func (x Publication_ParticipationType) Enum() *Publication_ParticipationType {
	p := new(Publication_ParticipationType)
	*p = x
	return p
}

func (x Publication_ParticipationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Publication_ParticipationType) Descriptor() protoreflect.EnumDescriptor {
	return file_skills_proto_enumTypes[3].Descriptor()
}

func (Publication_ParticipationType) Type() protoreflect.EnumType {
	return &file_skills_proto_enumTypes[3]
}

func (x Publication_ParticipationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Publication_ParticipationType.Descriptor instead.
func (Publication_ParticipationType) EnumDescriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{3, 0}
}

type UpdateResponse_Status int32

const (
	UpdateResponse_COMPLETED_SUCCESSFULLY UpdateResponse_Status = 0
	UpdateResponse_PARTIAL                UpdateResponse_Status = 1
	UpdateResponse_ERROR                  UpdateResponse_Status = 2
)

// Enum value maps for UpdateResponse_Status.
var (
	UpdateResponse_Status_name = map[int32]string{
		0: "COMPLETED_SUCCESSFULLY",
		1: "PARTIAL",
		2: "ERROR",
	}
	UpdateResponse_Status_value = map[string]int32{
		"COMPLETED_SUCCESSFULLY": 0,
		"PARTIAL":                1,
		"ERROR":                  2,
	}
)

func (x UpdateResponse_Status) Enum() *UpdateResponse_Status {
	p := new(UpdateResponse_Status)
	*p = x
	return p
}

func (x UpdateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_skills_proto_enumTypes[4].Descriptor()
}

func (UpdateResponse_Status) Type() protoreflect.EnumType {
	return &file_skills_proto_enumTypes[4]
}

func (x UpdateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateResponse_Status.Descriptor instead.
func (UpdateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{10, 0}
}

type Experience struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Place    string                 `protobuf:"bytes,1,opt,name=place,proto3" json:"place,omitempty"`
	PlaceRef string                 `protobuf:"bytes,2,opt,name=placeRef,proto3" json:"placeRef,omitempty"`
	Type     string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name     string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Start    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start,proto3" json:"start,omitempty"`
	End      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Experience) Reset() {
	*x = Experience{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skills_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Experience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Experience) ProtoMessage() {}

func (x *Experience) ProtoReflect() protoreflect.Message {
	mi := &file_skills_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Experience.ProtoReflect.Descriptor instead.
func (*Experience) Descriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{0}
}

func (x *Experience) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *Experience) GetPlaceRef() string {
	if x != nil {
		return x.PlaceRef
	}
	return ""
}

func (x *Experience) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Experience) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Experience) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Experience) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type OpenSourceProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Site        string                 `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Labels      []string               `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	Start       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start,proto3" json:"start,omitempty"`
	End         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *OpenSourceProject) Reset() {
	*x = OpenSourceProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skills_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSourceProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSourceProject) ProtoMessage() {}

func (x *OpenSourceProject) ProtoReflect() protoreflect.Message {
	mi := &file_skills_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSourceProject.ProtoReflect.Descriptor instead.
func (*OpenSourceProject) Descriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{1}
}

func (x *OpenSourceProject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpenSourceProject) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *OpenSourceProject) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OpenSourceProject) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *OpenSourceProject) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *OpenSourceProject) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type Certification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer   string                 `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	DbId     *string                `protobuf:"bytes,2,opt,name=dbId,proto3,oneof" json:"dbId,omitempty"`
	Name     string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Hash     string                 `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Link     string                 `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	Keywords []string               `protobuf:"bytes,7,rep,name=keywords,proto3" json:"keywords,omitempty"`
	IssuedOn *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=issuedOn,proto3" json:"issuedOn,omitempty"`
}

func (x *Certification) Reset() {
	*x = Certification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skills_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certification) ProtoMessage() {}

func (x *Certification) ProtoReflect() protoreflect.Message {
	mi := &file_skills_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certification.ProtoReflect.Descriptor instead.
func (*Certification) Descriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{2}
}

func (x *Certification) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Certification) GetDbId() string {
	if x != nil && x.DbId != nil {
		return *x.DbId
	}
	return ""
}

func (x *Certification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Certification) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Certification) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Certification) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Certification) GetIssuedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedOn
	}
	return nil
}

type Publication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *string                       `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Institution        string                        `protobuf:"bytes,10,opt,name=institution,proto3" json:"institution,omitempty"`
	Periodic           string                        `protobuf:"bytes,2,opt,name=periodic,proto3" json:"periodic,omitempty"`
	Title              string                        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Pages              string                        `protobuf:"bytes,4,opt,name=pages,proto3" json:"pages,omitempty"`
	Participation      Publication_ParticipationType `protobuf:"varint,5,opt,name=participation,proto3,enum=eu.terranatal.skillz.entities.Publication_ParticipationType" json:"participation,omitempty"`
	Link               string                        `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	PublishedOn        *timestamppb.Timestamp        `protobuf:"bytes,7,opt,name=publishedOn,proto3" json:"publishedOn,omitempty"`
	IdentificationCode string                        `protobuf:"bytes,8,opt,name=identificationCode,proto3" json:"identificationCode,omitempty"`
	Keywords           []string                      `protobuf:"bytes,9,rep,name=keywords,proto3" json:"keywords,omitempty"`
}

func (x *Publication) Reset() {
	*x = Publication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skills_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication) ProtoMessage() {}

func (x *Publication) ProtoReflect() protoreflect.Message {
	mi := &file_skills_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication.ProtoReflect.Descriptor instead.
func (*Publication) Descriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{3}
}

func (x *Publication) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Publication) GetInstitution() string {
	if x != nil {
		return x.Institution
	}
	return ""
}

func (x *Publication) GetPeriodic() string {
	if x != nil {
		return x.Periodic
	}
	return ""
}

func (x *Publication) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Publication) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *Publication) GetParticipation() Publication_ParticipationType {
	if x != nil {
		return x.Participation
	}
	return Publication_MAIN_AUTHOR
}

func (x *Publication) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Publication) GetPublishedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedOn
	}
	return nil
}

func (x *Publication) GetIdentificationCode() string {
	if x != nil {
		return x.IdentificationCode
	}
	return ""
}

func (x *Publication) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type PersonAchievements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certifications     []*Certification     `protobuf:"bytes,5,rep,name=certifications,proto3" json:"certifications,omitempty"`
	Publications       []*Publication       `protobuf:"bytes,6,rep,name=publications,proto3" json:"publications,omitempty"`
	WorkExperience     []*Experience        `protobuf:"bytes,7,rep,name=workExperience,proto3" json:"workExperience,omitempty"`
	OpenSourceProjects []*OpenSourceProject `protobuf:"bytes,8,rep,name=openSourceProjects,proto3" json:"openSourceProjects,omitempty"`
}

func (x *PersonAchievements) Reset() {
	*x = PersonAchievements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skills_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonAchievements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonAchievements) ProtoMessage() {}

func (x *PersonAchievements) ProtoReflect() protoreflect.Message {
	mi := &file_skills_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonAchievements.ProtoReflect.Descriptor instead.
func (*PersonAchievements) Descriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{4}
}

func (x *PersonAchievements) GetCertifications() []*Certification {
	if x != nil {
		return x.Certifications
	}
	return nil
}

func (x *PersonAchievements) GetPublications() []*Publication {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *PersonAchievements) GetWorkExperience() []*Experience {
	if x != nil {
		return x.WorkExperience
	}
	return nil
}

func (x *PersonAchievements) GetOpenSourceProjects() []*OpenSourceProject {
	if x != nil {
		return x.OpenSourceProjects
	}
	return nil
}

type PhoneNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number string    `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Type   PhoneType `protobuf:"varint,2,opt,name=type,proto3,enum=eu.terranatal.skillz.entities.PhoneType" json:"type,omitempty"`
}

func (x *PhoneNumber) Reset() {
	*x = PhoneNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skills_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneNumber) ProtoMessage() {}

func (x *PhoneNumber) ProtoReflect() protoreflect.Message {
	mi := &file_skills_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneNumber.ProtoReflect.Descriptor instead.
func (*PhoneNumber) Descriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{5}
}

func (x *PhoneNumber) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *PhoneNumber) GetType() PhoneType {
	if x != nil {
		return x.Type
	}
	return PhoneType_MOBILE
}

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoogleId          *string                `protobuf:"bytes,1,opt,name=googleId,proto3,oneof" json:"googleId,omitempty"`
	FirstName         *string                `protobuf:"bytes,2,opt,name=firstName,proto3,oneof" json:"firstName,omitempty"`
	MiddleName        *string                `protobuf:"bytes,12,opt,name=middleName,proto3,oneof" json:"middleName,omitempty"`
	LastName          *string                `protobuf:"bytes,3,opt,name=lastName,proto3,oneof" json:"lastName,omitempty"`
	Id                *string                `protobuf:"bytes,4,opt,name=id,proto3,oneof" json:"id,omitempty"` // ObjectId
	Email             string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	AlternativeEmails []string               `protobuf:"bytes,6,rep,name=alternativeEmails,proto3" json:"alternativeEmails,omitempty"`
	Phones            []*PhoneNumber         `protobuf:"bytes,7,rep,name=phones,proto3" json:"phones,omitempty"`
	Picture           *string                `protobuf:"bytes,8,opt,name=picture,proto3,oneof" json:"picture,omitempty"`
	LastUpdated       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	Experience        *PersonAchievements    `protobuf:"bytes,10,opt,name=experience,proto3" json:"experience,omitempty"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skills_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_skills_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{6}
}

func (x *Person) GetGoogleId() string {
	if x != nil && x.GoogleId != nil {
		return *x.GoogleId
	}
	return ""
}

func (x *Person) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *Person) GetMiddleName() string {
	if x != nil && x.MiddleName != nil {
		return *x.MiddleName
	}
	return ""
}

func (x *Person) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *Person) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Person) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Person) GetAlternativeEmails() []string {
	if x != nil {
		return x.AlternativeEmails
	}
	return nil
}

func (x *Person) GetPhones() []*PhoneNumber {
	if x != nil {
		return x.Phones
	}
	return nil
}

func (x *Person) GetPicture() string {
	if x != nil && x.Picture != nil {
		return *x.Picture
	}
	return ""
}

func (x *Person) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *Person) GetExperience() *PersonAchievements {
	if x != nil {
		return x.Experience
	}
	return nil
}

type PersonSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName   *string      `protobuf:"bytes,1,opt,name=firstName,proto3,oneof" json:"firstName,omitempty"`
	MiddleName  *string      `protobuf:"bytes,2,opt,name=middleName,proto3,oneof" json:"middleName,omitempty"`
	LastName    *string      `protobuf:"bytes,3,opt,name=lastName,proto3,oneof" json:"lastName,omitempty"`
	Id          *int64       `protobuf:"varint,4,opt,name=id,proto3,oneof" json:"id,omitempty"` // Unique ID number for this person.
	Email       *string      `protobuf:"bytes,5,opt,name=email,proto3,oneof" json:"email,omitempty"`
	PhoneNumber *PhoneNumber `protobuf:"bytes,7,opt,name=phoneNumber,proto3,oneof" json:"phoneNumber,omitempty"`
}

func (x *PersonSearchParams) Reset() {
	*x = PersonSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skills_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonSearchParams) ProtoMessage() {}

func (x *PersonSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_skills_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonSearchParams.ProtoReflect.Descriptor instead.
func (*PersonSearchParams) Descriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{7}
}

func (x *PersonSearchParams) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *PersonSearchParams) GetMiddleName() string {
	if x != nil && x.MiddleName != nil {
		return *x.MiddleName
	}
	return ""
}

func (x *PersonSearchParams) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *PersonSearchParams) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PersonSearchParams) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *PersonSearchParams) GetPhoneNumber() *PhoneNumber {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

type PersonUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NewData *Person `protobuf:"bytes,3,opt,name=newData,proto3" json:"newData,omitempty"`
}

func (x *PersonUpdate) Reset() {
	*x = PersonUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skills_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonUpdate) ProtoMessage() {}

func (x *PersonUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_skills_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonUpdate.ProtoReflect.Descriptor instead.
func (*PersonUpdate) Descriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{8}
}

func (x *PersonUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PersonUpdate) GetNewData() *Person {
	if x != nil {
		return x.NewData
	}
	return nil
}

type PublUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NewData *Publication `protobuf:"bytes,3,opt,name=newData,proto3" json:"newData,omitempty"`
}

func (x *PublUpdate) Reset() {
	*x = PublUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skills_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublUpdate) ProtoMessage() {}

func (x *PublUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_skills_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublUpdate.ProtoReflect.Descriptor instead.
func (*PublUpdate) Descriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{9}
}

func (x *PublUpdate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PublUpdate) GetNewData() *Publication {
	if x != nil {
		return x.NewData
	}
	return nil
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        UpdateResponse_Status `protobuf:"varint,1,opt,name=result,proto3,enum=eu.terranatal.skillz.entities.UpdateResponse_Status" json:"result,omitempty"`
	ErrorMessages []string              `protobuf:"bytes,2,rep,name=errorMessages,proto3" json:"errorMessages,omitempty"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skills_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_skills_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_skills_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateResponse) GetResult() UpdateResponse_Status {
	if x != nil {
		return x.Result
	}
	return UpdateResponse_COMPLETED_SUCCESSFULLY
}

func (x *UpdateResponse) GetErrorMessages() []string {
	if x != nil {
		return x.ErrorMessages
	}
	return nil
}

var File_skills_proto protoreflect.FileDescriptor

var file_skills_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d,
	0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6,
	0x01, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22,
	0xd9, 0x01, 0x0a, 0x0d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x62, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x64, 0x62, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x4f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x62, 0x49, 0x64, 0x22, 0xf2, 0x03, 0x0a, 0x0b,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61,
	0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x5b, 0x0a, 0x11,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x47, 0x55, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x10, 0x04, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x22, 0xef, 0x02, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a,
	0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61,
	0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61,
	0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x60, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65,
	0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x12,
	0x6f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x22, 0x63, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa9, 0x04, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61,
	0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x75, 0x2e,
	0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xcb, 0x02, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65,
	0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x48, 0x05, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x5f, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74,
	0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x62, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61,
	0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x65, 0x75, 0x2e, 0x74,
	0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x3c, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x4c,
	0x59, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0x5a, 0x0a, 0x0f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x49, 0x43, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x47, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54,
	0x48, 0x45, 0x53, 0x49, 0x53, 0x10, 0x03, 0x2a, 0x59, 0x0a, 0x0a, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x56,
	0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x43, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x50, 0x45, 0x52,
	0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x59,
	0x10, 0x05, 0x2a, 0x34, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x03, 0x32, 0xc8, 0x02, 0x0a, 0x0d, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x2e,
	0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x1a, 0x25, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e,
	0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x0c, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x65, 0x75,
	0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x25,
	0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x1a, 0x2d, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e,
	0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xf4, 0x01, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x14, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61,
	0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x2a, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x11, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x2e, 0x65, 0x75, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c,
	0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x2d, 0x2e, 0x65, 0x75,
	0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x7a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2f, 0x5a, 0x13, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0xaa, 0x02, 0x17, 0x54, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x61, 0x74, 0x61, 0x6c, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x7a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_skills_proto_rawDescOnce sync.Once
	file_skills_proto_rawDescData = file_skills_proto_rawDesc
)

func file_skills_proto_rawDescGZIP() []byte {
	file_skills_proto_rawDescOnce.Do(func() {
		file_skills_proto_rawDescData = protoimpl.X.CompressGZIP(file_skills_proto_rawDescData)
	})
	return file_skills_proto_rawDescData
}

var file_skills_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_skills_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_skills_proto_goTypes = []interface{}{
	(PublicationType)(0),               // 0: eu.terranatal.skillz.entities.PublicationType
	(SkillLevel)(0),                    // 1: eu.terranatal.skillz.entities.SkillLevel
	(PhoneType)(0),                     // 2: eu.terranatal.skillz.entities.PhoneType
	(Publication_ParticipationType)(0), // 3: eu.terranatal.skillz.entities.Publication.ParticipationType
	(UpdateResponse_Status)(0),         // 4: eu.terranatal.skillz.entities.UpdateResponse.Status
	(*Experience)(nil),                 // 5: eu.terranatal.skillz.entities.Experience
	(*OpenSourceProject)(nil),          // 6: eu.terranatal.skillz.entities.OpenSourceProject
	(*Certification)(nil),              // 7: eu.terranatal.skillz.entities.Certification
	(*Publication)(nil),                // 8: eu.terranatal.skillz.entities.Publication
	(*PersonAchievements)(nil),         // 9: eu.terranatal.skillz.entities.PersonAchievements
	(*PhoneNumber)(nil),                // 10: eu.terranatal.skillz.entities.PhoneNumber
	(*Person)(nil),                     // 11: eu.terranatal.skillz.entities.Person
	(*PersonSearchParams)(nil),         // 12: eu.terranatal.skillz.entities.PersonSearchParams
	(*PersonUpdate)(nil),               // 13: eu.terranatal.skillz.entities.PersonUpdate
	(*PublUpdate)(nil),                 // 14: eu.terranatal.skillz.entities.PublUpdate
	(*UpdateResponse)(nil),             // 15: eu.terranatal.skillz.entities.UpdateResponse
	(*timestamppb.Timestamp)(nil),      // 16: google.protobuf.Timestamp
}
var file_skills_proto_depIdxs = []int32{
	16, // 0: eu.terranatal.skillz.entities.Experience.start:type_name -> google.protobuf.Timestamp
	16, // 1: eu.terranatal.skillz.entities.Experience.end:type_name -> google.protobuf.Timestamp
	16, // 2: eu.terranatal.skillz.entities.OpenSourceProject.start:type_name -> google.protobuf.Timestamp
	16, // 3: eu.terranatal.skillz.entities.OpenSourceProject.end:type_name -> google.protobuf.Timestamp
	16, // 4: eu.terranatal.skillz.entities.Certification.issuedOn:type_name -> google.protobuf.Timestamp
	3,  // 5: eu.terranatal.skillz.entities.Publication.participation:type_name -> eu.terranatal.skillz.entities.Publication.ParticipationType
	16, // 6: eu.terranatal.skillz.entities.Publication.publishedOn:type_name -> google.protobuf.Timestamp
	7,  // 7: eu.terranatal.skillz.entities.PersonAchievements.certifications:type_name -> eu.terranatal.skillz.entities.Certification
	8,  // 8: eu.terranatal.skillz.entities.PersonAchievements.publications:type_name -> eu.terranatal.skillz.entities.Publication
	5,  // 9: eu.terranatal.skillz.entities.PersonAchievements.workExperience:type_name -> eu.terranatal.skillz.entities.Experience
	6,  // 10: eu.terranatal.skillz.entities.PersonAchievements.openSourceProjects:type_name -> eu.terranatal.skillz.entities.OpenSourceProject
	2,  // 11: eu.terranatal.skillz.entities.PhoneNumber.type:type_name -> eu.terranatal.skillz.entities.PhoneType
	10, // 12: eu.terranatal.skillz.entities.Person.phones:type_name -> eu.terranatal.skillz.entities.PhoneNumber
	16, // 13: eu.terranatal.skillz.entities.Person.lastUpdated:type_name -> google.protobuf.Timestamp
	9,  // 14: eu.terranatal.skillz.entities.Person.experience:type_name -> eu.terranatal.skillz.entities.PersonAchievements
	10, // 15: eu.terranatal.skillz.entities.PersonSearchParams.phoneNumber:type_name -> eu.terranatal.skillz.entities.PhoneNumber
	11, // 16: eu.terranatal.skillz.entities.PersonUpdate.newData:type_name -> eu.terranatal.skillz.entities.Person
	8,  // 17: eu.terranatal.skillz.entities.PublUpdate.newData:type_name -> eu.terranatal.skillz.entities.Publication
	4,  // 18: eu.terranatal.skillz.entities.UpdateResponse.result:type_name -> eu.terranatal.skillz.entities.UpdateResponse.Status
	11, // 19: eu.terranatal.skillz.entities.PersonService.createNewPerson:input_type -> eu.terranatal.skillz.entities.Person
	12, // 20: eu.terranatal.skillz.entities.PersonService.searchPerson:input_type -> eu.terranatal.skillz.entities.PersonSearchParams
	13, // 21: eu.terranatal.skillz.entities.PersonService.updatePerson:input_type -> eu.terranatal.skillz.entities.PersonUpdate
	8,  // 22: eu.terranatal.skillz.entities.PublicationsService.createNewPublication:input_type -> eu.terranatal.skillz.entities.Publication
	14, // 23: eu.terranatal.skillz.entities.PublicationsService.updatePublication:input_type -> eu.terranatal.skillz.entities.PublUpdate
	11, // 24: eu.terranatal.skillz.entities.PersonService.createNewPerson:output_type -> eu.terranatal.skillz.entities.Person
	11, // 25: eu.terranatal.skillz.entities.PersonService.searchPerson:output_type -> eu.terranatal.skillz.entities.Person
	15, // 26: eu.terranatal.skillz.entities.PersonService.updatePerson:output_type -> eu.terranatal.skillz.entities.UpdateResponse
	8,  // 27: eu.terranatal.skillz.entities.PublicationsService.createNewPublication:output_type -> eu.terranatal.skillz.entities.Publication
	15, // 28: eu.terranatal.skillz.entities.PublicationsService.updatePublication:output_type -> eu.terranatal.skillz.entities.UpdateResponse
	24, // [24:29] is the sub-list for method output_type
	19, // [19:24] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_skills_proto_init() }
func file_skills_proto_init() {
	if File_skills_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_skills_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Experience); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skills_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSourceProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skills_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skills_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Publication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skills_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonAchievements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skills_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skills_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skills_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skills_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skills_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skills_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_skills_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_skills_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_skills_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_skills_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_skills_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_skills_proto_goTypes,
		DependencyIndexes: file_skills_proto_depIdxs,
		EnumInfos:         file_skills_proto_enumTypes,
		MessageInfos:      file_skills_proto_msgTypes,
	}.Build()
	File_skills_proto = out.File
	file_skills_proto_rawDesc = nil
	file_skills_proto_goTypes = nil
	file_skills_proto_depIdxs = nil
}
